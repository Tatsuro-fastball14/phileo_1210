<%= csrf_meta_tags %>

<section class="plan" style="max-width:520px;margin:24px auto 40px;text-align:center;">
  <h2 style="margin:0 0 8px;">有料プラン</h2>
  <p style="font-size:1.6rem;font-weight:700;color:#111;margin:0;">月額 880円（税込）</p>
  <p style="margin:8px 0 16px;color:#444;">毎月自動更新／<strong>いつでも解約可能</strong>です。</p>

  <!-- ✅ ステータス表示（エラー/成功メッセージ） -->
  <div id="status" aria-live="polite" style="margin:0 auto 12px;max-width:520px;text-align:left;"></div>

  <form id="card-form"
        novalidate
        data-turbo="false"
        data-publishable-key="<%= @stripe_pk %>"
        data-client-secret ="<%= @client_secret %>"
        style="text-align:left;margin:0 auto;max-width:520px;position:relative;">
    <label for="card-element" style="display:block;margin:0 0 6px;color:#333;">クレジットカード</label>
    <div id="card-element" style="padding:12px;border:1px solid #ddd;border-radius:8px;background:#fff;"></div>

    <div id="card-errors" role="alert" aria-live="polite" style="color:#c00;margin-top:8px;min-height:1.2em;"></div>

    <button id="submit-btn" type="submit"
            style="margin-top:12px;padding:10px 18px;font-size:1rem;border:0;border-radius:8px;background:#111;color:#fff;cursor:pointer;">
      保存して購読開始
    </button>

    <!-- ✅ ローディングオーバーレイ（インジケーター＆バー） -->
    <div id="loading-overlay" aria-hidden="true" style="display:none;position:absolute;inset:0;background:rgba(255,255,255,0.8);backdrop-filter:saturate(120%) blur(1px);border-radius:8px;">
      <div role="status" aria-live="assertive" style="position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);width:80%;max-width:360px;text-align:center;">
        <div class="spinner" style="width:28px;height:28px;border:3px solid #999;border-top-color:transparent;border-radius:50%;margin:0 auto 10px;animation:spin 0.8s linear infinite;"></div>
        <div style="font-size:0.95rem;color:#333;margin-bottom:8px;">登録処理中です…</div>
        <div class="progress" style="height:6px;background:#eee;border-radius:99px;overflow:hidden;">
          <div class="bar" style="height:100%;width:40%;background:#111;animation:indet 1.2s ease-in-out infinite;"></div>
        </div>
      </div>
    </div>
  </form>

  <p style="font-size:0.92rem;color:#555;margin-top:16px;line-height:1.6;">
    ※料金は税込表示です。更新日は初回登録日の翌月同日です。<br>
    ※解約はマイページの<strong>「購読を解約する」</strong>ボタンから、いつでも行えます。
  </p>

  <a href="/cards" style="display:inline-block;margin-top:6px;color:#0a66c2;text-decoration:underline;">▶ 購読を解約する（マイページへ）</a>
</section>

<style>
@keyframes spin { to { transform: rotate(360deg); } }
@keyframes indet {
  0% { transform: translateX(-60%); width: 40%; }
  50% { transform: translateX(20%); width: 60%; }
  100% { transform: translateX(120%); width: 40%; }
}
</style>

<script src="https://js.stripe.com/v3/"></script>
<script>
(() => {
  const form = document.getElementById("card-form");
  if (!form) return;

  const statusBox = document.getElementById("status");
  const overlay   = document.getElementById("loading-overlay");
  const btn       = document.getElementById("submit-btn");
  const errorBox  = document.getElementById("card-errors");

  const pk = form.dataset.publishableKey;
  const clientSecret = form.dataset.clientSecret;

  const showStatus = (msg, type="info") => {
    const colors = {
      info:   {bg:"#eaf4ff", bd:"#bcd9ff", fg:"#0b3d91"},
      ok:     {bg:"#edf9f0", bd:"#bde5c8", fg:"#1a7f37"},
      error:  {bg:"#ffefef", bd:"#f5bcbc", fg:"#a40000"}
    }[type] || {bg:"#f6f6f6", bd:"#ddd", fg:"#333"};
    statusBox.innerHTML =
      `<div style="padding:10px 12px;border:1px solid ${colors.bd};border-radius:8px;background:${colors.bg};color:${colors.fg};">${msg}</div>`;
  };

  const showLoading = () => {
    overlay.style.display = "block";
    overlay.setAttribute("aria-hidden", "false");
    btn.disabled = true;
    btn.style.opacity = 0.6;
    btn.style.cursor = "not-allowed";
    btn.textContent = "処理中…";
  };

  const hideLoading = () => {
    overlay.style.display = "none";
    overlay.setAttribute("aria-hidden", "true");
    btn.disabled = false;
    btn.style.opacity = 1;
    btn.style.cursor = "pointer";
    btn.textContent = "保存して購読開始";
  };

  if (!pk) {
    errorBox.textContent = "公開鍵が設定されていません（STRIPE_PUBLISHABLE_KEY）。";
    return;
  }
  if (!clientSecret) {
    errorBox.textContent = "クライアントシークレットが生成できていません。ページを再読み込みしてください。";
    return;
  }

  const stripe   = Stripe(pk);
  const elements = stripe.elements();
  const card     = elements.create("card");
  card.mount("#card-element");

  let inFlight = false;

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    if (inFlight) return;
    inFlight = true;
    errorBox.textContent = "";
    showLoading();
    showStatus("カード情報を確認しています…", "info");

    try {
      // 1) SetupIntent 確定 → PaymentMethod 取得
      const { error, setupIntent } = await stripe.confirmCardSetup(clientSecret, {
        payment_method: { card }
      });

      if (error) throw new Error(error.message || "カード認証に失敗しました。");

      showStatus("お支払い方法を登録しています…", "info");

      // 2) PM をサーバへ送信しサブスク作成
      const res = await fetch("/cards", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content
        },
        body: JSON.stringify({ payment_method_id: setupIntent.payment_method })
      });

      const json = await res.json().catch(() => ({}));
      if (!res.ok) throw new Error((json && json.error) ? json.error : "エラーが発生しました。時間をおいて再度お試しください。");

      // 3) 追加の 3DS 認証が必要なら実行
      if (json.requires_action && json.client_secret) {
        showStatus("追加認証を実行しています…", "info");
        const { error: error2 } = await stripe.confirmCardPayment(json.client_secret);
        if (error2) throw new Error(error2.message || "追加認証に失敗しました。");
      }

      // 4) 完了表示 → リダイレクト
      showStatus("登録が完了しました。ありがとうございます！", "ok");
      // 成功メッセージを短時間表示してから遷移
      setTimeout(() => {
        window.location.href = (json && json.redirect_to) ? json.redirect_to : "<%= cooks_search_path %>";
      }, 1200);

    } catch (err) {
      console.error(err);
      errorBox.textContent = err.message || "処理に失敗しました。時間をおいて再度お試しください。";
      showStatus("エラーが発生しました。内容をご確認ください。", "error");
      hideLoading();
      inFlight = false;
      return;
    }

    // 成功時は overlay はリダイレクトまで表示のまま
  });
})();
</script>
