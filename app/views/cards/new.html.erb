<!-- app/views/cards/new.html.erb -->
<%= csrf_meta_tags %>

<h1>カード登録</h1>
<form id="card-form" novalidate>
  <div id="card-element" style="padding:12px;border:1px solid #ddd;border-radius:6px;"></div>
  <div id="card-errors" role="alert" style="color:#c00;margin-top:8px;"></div>
  <button id="submit-btn" type="submit" style="margin-top:12px;">保存して購読開始</button>
</form>

<script src="https://js.stripe.com/v3/"></script>
<script>
  (async () => {
    const stripe = Stripe("<%= ENV.fetch('STRIPE_PUBLISHABLE_KEY') %>");
    const elements = stripe.elements({ locale: 'ja' });

    // 郵便番号UIを非表示（Linkの保存UIも出ません）
    const card = elements.create('card', { hidePostalCode: true });
    card.mount('#card-element');

    const form = document.getElementById('card-form');
    const errorEl = document.getElementById('card-errors');
    const submitBtn = document.getElementById('submit-btn');
    const clientSecret = "<%= @client_secret %>";

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      errorEl.textContent = '';
      submitBtn.disabled = true;

      // 1) SetupIntent を確定（住所／郵便番号は送らない）
      const { setupIntent, error } = await stripe.confirmCardSetup(clientSecret, {
        payment_method: {
          card,
          billing_details: {
            name: "<%= current_user.try(:name) || 'Customer' %>",
            email: "<%= current_user.try(:email) %>"
          }
        }
      });

      if (error) {
        errorEl.textContent = error.message || 'カード登録に失敗しました。';
        submitBtn.disabled = false;
        return;
      }

      // 2) PM をサーバへ渡してサブスク作成
      const csrfToken = (document.querySelector('meta[name="csrf-token"]') || {}).content || '';
      let res, json;
      try {
        res = await fetch("<%= cards_path %>", {
          method: "POST",
          headers: { "Content-Type": "application/json", "X-CSRF-Token": csrfToken },
          body: JSON.stringify({ payment_method_id: setupIntent.payment_method })
        });
        json = await res.json();
      } catch(_) {
        errorEl.textContent = 'ネットワークエラーが発生しました。';
        submitBtn.disabled = false;
        return;
      }

      // 3) 初回請求で3Dセキュアが必要なケース
      if (json && json.requires_action && json.client_secret) {
        const { error: confirmErr } = await stripe.confirmCardPayment(json.client_secret);
        if (confirmErr) {
          errorEl.textContent = confirmErr.message || '追加認証に失敗しました。';
          submitBtn.disabled = false;
          return;
        }
        // 決済成功 → サブスク最終確定コール
        const res2 = await fetch("/subscriptions/confirm", {
          method: "POST",
          headers: { "Content-Type": "application/json", "X-CSRF-Token": csrfToken },
          body: JSON.stringify({ subscription_id: json.subscription_id })
        });
        const json2 = await res2.json().catch(() => ({}));
        if (json2 && json2.ok) {
          window.location = json2.redirect_to || "<%= root_path %>";
          return;
        } else {
          errorEl.textContent = (json2 && json2.error) ? json2.error : '購読の確定に失敗しました。';
          submitBtn.disabled = false;
          return;
        }
      }

      // 4) 追加認証不要 → 成功
      if (json && json.ok) {
        window.location = json.redirect_to || "<%= root_path %>";
        return;
      }

      errorEl.textContent = (json && json.error) ? json.error : '登録に失敗しました。';
      submitBtn.disabled = false;
    });
  })();
</script>

<!--
ポイント:
- 「checkout.link.com〜」のURLも、Linkの「保存」UIも一切使いません。
- Card Element に { hidePostalCode: true } を指定しているため郵便番号入力UIは出ません。
- 3Dセキュア画面内の項目はカード発行会社のUIであり制御不可です。
-->
